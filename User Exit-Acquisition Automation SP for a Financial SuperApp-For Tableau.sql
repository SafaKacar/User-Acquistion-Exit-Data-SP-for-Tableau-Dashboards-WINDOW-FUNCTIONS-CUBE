--DELETE FROM BI_Workspace..FACT_UserAcquisitionAnalysis WHERE DAY(LastStreamDate) != 1;
WITH LastLoginDate_CTE AS
	(
	SELECT distinct--IIF(TotalBalance > 0,1,0),10) eklenecek önce izaya geçirrr!!!
		   COALESCE(YEAR(LastLoginDate),YEAR(LastLoginDate)) [Year],
		   COALESCE(DATEPART(quarter,LastLoginDate),DATEPART(quarter,LastLoginDate)) [Quarter]					 ,
		   COALESCE(CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ,CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT))	 MonthKey,
		   '0' MetricType,  --BY LOGIN DATE
		   cast(COALESCE(UR.[UserType]							,10) AS TINYINT) [UserType]					,
		   cast(COALESCE([IsLastLoginUnsuccessful]				,10) AS TINYINT) [IsLastLoginUnsuccessful]	,
		   cast(COALESCE(IsPermanentLockout						,10) AS TINYINT) IsPermanentLockout			,
		   cast(COALESCE([HasLedgeredTransaction]				,10) AS TINYINT) [HasLedgeredTransaction]	,
		   cast(COALESCE([HasClosedLoopP2P]						,10) AS TINYINT) [HasClosedLoopP2P]			,
		   CAST(COALESCE(UB.HasPositiveTRYBalance				,10) AS TINYINT) HasPositiveTRYBalance		,
		   CAST(COALESCE(UB.TotalBalanceInterval				,10) AS TINYINT) UserBalanceInterval		,
		    SUM(COUNT(UR.UserKey))																																						  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountMonth,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 1, UR.RegisterDate)											  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountRegisterAndLastDateWithin24Hr,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate) AND DATEPART(WEEK,UR.RegisterDate) = DATEPART(WEEK,UR.LastLoginDate)		  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountSameRegisterAndLastDateByWeek,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate) AND MONTH(UR.RegisterDate) = MONTH(UR.LastLoginDate)						  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountSameRegisterAndLastDateByMonth,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate) AND DATEPART(quarter,UR.RegisterDate) = DATEPART(quarter,UR.LastLoginDate) THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountSameRegisterAndLastDateByQuarter,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate)								   THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountSameRegisterAndLastDateByYear,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 1,  UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin24Hr,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 7,  UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountRegisterAndLastDateWithin7Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 30, UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountRegisterAndLastDateWithin30Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 90, UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountRegisterAndLastDateWithin90Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 360,UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountRegisterAndLastDateWithin360Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 7,  UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin7Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 30, UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin30Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 90, UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin90Days,
			SUM(COUNT(CASE WHEN UR.LastLoginDate BETWEEN UR.RegisterDate AND DATEADD(day, 360,UR.RegisterDate) THEN UR.UserKey ELSE NULL END))											  OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin360Days,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate) AND DATEPART(WEEK,UR.RegisterDate)	 = DATEPART(WEEK,UR.LastLoginDate)	  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByWeek,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate) AND MONTH(UR.RegisterDate)			 = MONTH(UR.LastLoginDate)			  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByMonth,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate) AND DATEPART(quarter,UR.RegisterDate) = DATEPART(quarter,UR.LastLoginDate) THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByQuarter,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastLoginDate)																			  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByYear,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver <= 50 OR UR.MaxUserBalanceEver IS NULL															  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountBelowBalance50,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver <= 50 OR UR.MaxUserBalanceEver IS NULL															  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountBelowBalance50,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver >= 1000																							  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LossCountAboveBalance1000,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver >= 1000																							  THEN UR.UserKey ELSE NULL END)) OVER (PARTITION BY								COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastLoginDate,'yyyyMM'))	CumulativeLossCountAboveBalance1000,
		    SUM(SUM(TxCount))																																							  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))											LedgeredTxCount,
		    SUM(SUM([MaxUserBalanceEver]))																																				  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN [MaxUserBalanceEver] IS NOT NULL THEN 1 END))	OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'), COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgMaxUserBalanceEver,
		    SUM(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)																																								[CumulativeLossCountOfAllTime],
		    SUM(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)*1.0 / SUM(COUNT(UR.UserKey)) OVER (PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	[CumulativeLossRatePastProjection],
		    SUM(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastLoginDate) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)																																			[CumulativeLossCountYEARLY],
		    SUM(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastLoginDate),DATEPART(quarter,LastLoginDate) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)																											[CumulativeLossCountQUARTER],
		    AVG(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)																																								[MovingAverageOfLossAllTime],
		    AVG(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastLoginDate) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)																																			[MovingAverageLossYEARLY],
		    AVG(Count(UR.UserKey))																																						  OVER (PARTITION BY							    COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastLoginDate),DATEPART(quarter,LastLoginDate) ORDER BY CAST(FORMAT(LastLoginDate,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)																											[MovingAverageLossQUARTER], 
		    SUM(SUM([TenureBetweenRegisterDateAndLoginDate]))																															  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(1))																											 OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'), COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgTenureBetweenRegisterDateAndLoginDate,
		    SUM(SUM([TenureBetweenRegisterDateLastUserBalanceModifiedAt]))																												  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenRegisterDateLastUserBalanceModifiedAt]	  IS NOT NULL					THEN 1 END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'), COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgTenureBetweenRegisterDateLastUserBalanceModifiedAt,
		    SUM(SUM([TenureBetweenRegisterDateLastMaxBalanceModifiedAt]))																												  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenRegisterDateLastMaxBalanceModifiedAt]	  IS NOT NULL					THEN 1 END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'), COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgTenureBetweenRegisterDateLastMaxBalanceModifiedAt,
		    SUM(SUM([TenureBetweenLastUserBalanceModifiedAtAndLastLoginDate]))																											  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenLastUserBalanceModifiedAtAndLastLoginDate] IS NOT NULL					THEN 1 END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'), COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgTenureBetweenLastUserBalanceModifiedAtAndLastLoginDate,
		    SUM(SUM(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastLoginDate AS DATE)) AND LastLoginDate THEN DATEDIFF(DAY,DateOfBirth,LastLoginDate)/(365.25) END))		  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastLoginDate AS DATE)) AND LastLoginDate THEN 1 END)) OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'), COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgUserAgeByLastDate,
		    MIN(MIN(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastLoginDate AS DATE)) AND LastLoginDate THEN DATEDIFF(DAY,DateOfBirth,LastLoginDate)/(365.25) END))		  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)) MinUserAgeByLastDate,
		    MAX(MAX(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastLoginDate AS DATE)) AND LastLoginDate THEN DATEDIFF(DAY,DateOfBirth,LastLoginDate)/(365.25) END))		  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)) MaxUserAgeByLastDate

		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPreviousMonth,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPrevious2Month,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPrevious3Month,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegistered2MonthsAgo,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3)) AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegistered3MonthsAgo,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < CAST(dateadd(MONTH, -1, GETDATE()) AS date) AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPreviousMTD,
																																																																												    
			--COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPreviousMonth,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPrevious2Month,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPrevious3Month,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegistered2MonthsAgo,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3))	   AND LastLoginDate >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -4)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegistered3MonthsAgo,
		    --COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < CAST(dateadd(MONTH, -1, GETDATE()) AS date) AND LastLoginDate >=dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastLoginDate < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastLoginDate,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < CAST(dateadd(MONTH, -1, GETDATE()) AS date) THEN UR.UserKey ELSE NULL END))																																								  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasLedgeredTransaction],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPreviousMTD
	FROM [DWH_Papara].[DBO].[FACT_UserRetentions] UR with (nolock)
	JOIN [DWH_Papara].[DBO].[DIM_UserAttributes]			  U	 with (nolock)																										 ON UR.UserKey =  U.User_Key
	JOIN (select  User_Key,TotalBalance,CASE WHEN TotalBalance <= 0							THEN 0
											 WHEN TotalBalance >  0 AND TotalBalance <=  50 THEN 1
											 WHEN TotalBalance > 50 AND TotalBalance <= 250 THEN 2
											 WHEN TotalBalance> 250							THEN 3 END TotalBalanceInterval,IIF(TotalBalance > 0,1,0) HasPositiveTRYBalance from [DWH_Papara].[DBO].[FACT_UserBalances] with (nolock) where Currency = 0) UB ON UR.UserKey = UB.User_Key
	where LastLoginDate IS NOT NULL
	GROUP BY FORMAT(LastLoginDate,'yyyyMM'),YEAR(LastLoginDate),DATEPART(quarter,LastLoginDate)--,UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]
			,CUBE(UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P],[IsPermanentLockout],UB.HasPositiveTRYBalance,UB.TotalBalanceInterval)
	),	LastLedgerTxDate_CTE AS
	(
	SELECT distinct
		   COALESCE(YEAR(LastUserBalanceModifiedAt),YEAR(LastUserBalanceModifiedAt)) [Year],
		   COALESCE(DATEPART(quarter,LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt)) [Quarter]					 ,
		   COALESCE(CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ,CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT))	 MonthKey					 ,
		   '1' MetricType,  --BY LEDGER DATE
		   cast(COALESCE(UR.[UserType]							,10) AS TINYINT) [UserType]					,
		   cast(COALESCE([IsLastLoginUnsuccessful]				,10) AS TINYINT) [IsLastLoginUnsuccessful]	,
		   cast(COALESCE(IsPermanentLockout						,10) AS TINYINT) IsPermanentLockout			,
		   cast(1 AS TINYINT)													 [HasLedgeredTransaction]	,/*DİKKAT: CTE'deki bu öbek, yapısı gereği 1 flaglenmiştir, sorguda "10" bu kısımda overall'a yanıt vermeyecektir (Tableau'da MetricType = 1 & 1 hem 1'e hem 10'ayarlanacak şekilde kodlanmalıdır, 10 için burada satır basmak gereksiz efor olacaktır*/
		   cast(COALESCE([HasClosedLoopP2P]						,10) AS TINYINT) [HasClosedLoopP2P]			,
		   CAST(COALESCE(UB.HasPositiveTRYBalance				,10) AS TINYINT) HasPositiveTRYBalance		,
		   CAST(COALESCE(UB.TotalBalanceInterval				,10) AS TINYINT) UserBalanceInterval		,
		    SUM(COUNT(UR.UserKey))																																													OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountMonth,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 1  , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountRegisterAndLastDateWithin24Hr,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 7  , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountRegisterAndLastDateWithin7Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 30 , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountRegisterAndLastDateWithin30Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 90 , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountRegisterAndLastDateWithin90Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 360, UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountRegisterAndLastDateWithin360Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 7  , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin7Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 30 , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin30Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 90 , UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin90Days,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 360, UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin360Days,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt) AND DATEPART(WEEK,UR.RegisterDate)	 = DATEPART(WEEK,UR.LastUserBalanceModifiedAt)	  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountSameRegisterAndLastDateByWeek,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt) AND MONTH(UR.RegisterDate)			 = MONTH(UR.LastUserBalanceModifiedAt)			  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountSameRegisterAndLastDateByMonth,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt) AND DATEPART(quarter,UR.RegisterDate) = DATEPART(quarter,UR.LastUserBalanceModifiedAt) THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountSameRegisterAndLastDateByQuarter,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt)																						  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountSameRegisterAndLastDateByYear,
			SUM(COUNT(CASE WHEN UR.LastUserBalanceModifiedAt BETWEEN UR.RegisterDate AND DATEADD(day, 1, UR.RegisterDate)														  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountRegisterAndLastDateWithin24Hr,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt) AND DATEPART(WEEK,UR.RegisterDate)	 = DATEPART(WEEK,UR.LastUserBalanceModifiedAt)	  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByWeek,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt) AND MONTH(UR.RegisterDate)			 = MONTH(UR.LastUserBalanceModifiedAt)			  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByMonth,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt) AND DATEPART(quarter,UR.RegisterDate) = DATEPART(quarter,UR.LastUserBalanceModifiedAt) THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByQuarter,
			SUM(COUNT(CASE WHEN YEAR(UR.RegisterDate) = YEAR(UR.LastUserBalanceModifiedAt)																						  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountSameRegisterAndLastDateByYear,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver <= 50 OR UR.MaxUserBalanceEver IS NULL																					  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountBelowBalance50,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver <= 50 OR UR.MaxUserBalanceEver IS NULL																					  THEN UR.UserKey ELSE NULL END))	OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountBelowBalance50,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver >= 1000 THEN UR.UserKey ELSE NULL END))																														OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LossCountAboveBalance1000,
			SUM(COUNT(CASE WHEN UR.MaxUserBalanceEver >= 1000 THEN UR.UserKey ELSE NULL END))																														OVER (PARTITION BY										      COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM') ROWS UNBOUNDED PRECEDING)	CumulativeLossCountAboveBalance1000,
		   SUM(SUM(TxCount))																																														OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))																				LedgeredTxCount,
		   SUM(SUM([MaxUserBalanceEver]))																																											OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(1))																								  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)))	AvgMaxUserBalanceEver,
		   SUM(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)													  [CumulativeLossCountOfAllTime],
		   SUM(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)*1.0/SUM(COUNT(UR.UserKey)) OVER (PARTITION BY											COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	[CumulativeLossRatePastProjection],
		   SUM(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)								  [CumulativeLossCountYEARLY],
		   SUM(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING) [CumulativeLossCountQUARTER],
		   AVG(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)													  [MovingAverageOfLossAllTime],
		   AVG(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)								  [MovingAverageLossYEARLY],
		   AVG(Count(UR.UserKey))																																													OVER (PARTITION BY											  COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10),YEAR(LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING) [MovingAverageLossQUARTER], 
		   SUM(SUM([TenureBetweenRegisterDateAndLoginDate]))																																						OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenRegisterDateAndLoginDate] IS NOT NULL THEN 1 END))																  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))) AvgTenureBetweenRegisterDateAndLoginDate,
		   SUM(SUM([TenureBetweenRegisterDateLastUserBalanceModifiedAt]))																																			OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(1))																																		  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))) AvgTenureBetweenRegisterDateLastUserBalanceModifiedAt,
		   SUM(SUM([TenureBetweenRegisterDateLastMaxBalanceModifiedAt]))																																			OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(1))																																		  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))) AvgTenureBetweenRegisterDateLastMaxBalanceModifiedAt,
		   SUM(SUM([TenureBetweenLastUserBalanceModifiedAtAndLastLoginDate]))																																		OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenLastUserBalanceModifiedAtAndLastLoginDate] IS NOT NULL												 THEN 1 END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))) AvgTenureBetweenLastUserBalanceModifiedAtAndLastLoginDate,
		   SUM(SUM(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN DATEDIFF(DAY,DateOfBirth,LastUserBalanceModifiedAt)/(365.25) END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / (SUM(COUNT(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt		 THEN 1 END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))) AvgUserAgeByLastDate,
		   MIN(MIN(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN DATEDIFF(DAY,DateOfBirth,LastUserBalanceModifiedAt)/(365.25) END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)) MinUserAgeByLastDate,
		   MAX(MAX(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN DATEDIFF(DAY,DateOfBirth,LastUserBalanceModifiedAt)/(365.25) END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)) MaxUserAgeByLastDate

		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPreviousMonth,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPrevious2Month,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPrevious3Month,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegistered2MonthsAgo,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3)) AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegistered3MonthsAgo,
		    --SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < CAST(dateadd(MONTH, -1, GETDATE()) AS date) AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))	ActiveUserRegisteredPreviousMTD,
																																																																												    
			--COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPreviousMonth,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPrevious2Month,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -1)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPrevious3Month,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -3)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -2)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegistered2MonthsAgo,
		 --   COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3))	   AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -4)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -3)) THEN UR.UserKey WHEN DAY(GETDATE()) = 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -5)) AND RegisterDate < dateadd(day, 1, eomonth(GETDATE(), -4)) THEN UR.UserKey ELSE NULL END))		  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegistered3MonthsAgo,
		    --COALESCE(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < CAST(dateadd(MONTH, -1, GETDATE()) AS date)AND LastUserBalanceModifiedAt >= dateadd(day, 1, eomonth(GETDATE(), -1)) AND LastUserBalanceModifiedAt < CAST(GETDATE() AS DATE) THEN UR.UserKey ELSE NULL END))  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10))*1.0 / NULLIF(SUM(COUNT(CASE WHEN DAY(GETDATE()) != 1 AND RegisterDate >= dateadd(day, 1, eomonth(GETDATE(), -2)) AND RegisterDate < CAST(dateadd(MONTH, -1, GETDATE()) AS date) THEN UR.UserKey ELSE NULL END))																																									  OVER(PARTITION BY COALESCE(UR.[UserType],10),COALESCE([IsLastLoginUnsuccessful],10),COALESCE([HasClosedLoopP2P],10),COALESCE([IsPermanentLockout],10),COALESCE(UB.HasPositiveTRYBalance,10),COALESCE(UB.TotalBalanceInterval,10)),0),NULL)	ActiveUserRateRegisteredPreviousMTD																																	
	FROM [DWH_Papara].[DBO].[FACT_UserRetentions] UR with (nolock)
	JOIN [DWH_Papara].[DBO].[DIM_UserAttributes]			  U	 with (nolock)																										 ON UR.UserKey =  U.User_Key
	JOIN (select  User_Key,TotalBalance,CASE WHEN TotalBalance <= 0							THEN 0
											 WHEN TotalBalance >  0 AND TotalBalance <=  50 THEN 1
											 WHEN TotalBalance > 50 AND TotalBalance <= 250 THEN 2
											 WHEN TotalBalance> 250							THEN 3 END TotalBalanceInterval,IIF(TotalBalance > 0,1,0) HasPositiveTRYBalance from [DWH_Papara].[DBO].[FACT_UserBalances] with (nolock) where Currency = 0) UB ON UR.UserKey = UB.User_Key
	where LastUserBalanceModifiedAt IS NOT NULL and LastLoginDate IS NOT NULL
	GROUP BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),YEAR(LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt)--,UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]
			,CUBE(UR.[UserType],[IsLastLoginUnsuccessful],[HasClosedLoopP2P],[IsPermanentLockout],UB.HasPositiveTRYBalance,UB.TotalBalanceInterval)
	),	BasicUserCalculations_CTE AS
	(
	SELECT COALESCE(UR.UserType,10) UserType,
		   FORMAT(UR.RegisterDate,'yyyyMM') MonthKey,
		   COUNT(UR.UserKey)				RegisterCount,
		   SUM(COUNT(UR.UserKey)) OVER (PARTITION BY COALESCE(UR.UserType,10) ORDER BY FORMAT(UR.RegisterDate,'yyyyMM')) UserRegisterCumulativeCount,
		   SUM(CASE WHEN U.DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(UR.RegisterDate AS DATE)) AND UR.RegisterDate THEN DATEDIFF(DAY,U.DateOfBirth,UR.RegisterDate)/(365.25) END)*1.0 / COUNT(CASE WHEN U.DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(UR.RegisterDate AS DATE)) AND UR.RegisterDate THEN 1 END) AvgUserAgeByRegisterDate,
		   MIN(CASE WHEN U.DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(UR.RegisterDate AS DATE)) AND UR.RegisterDate THEN DATEDIFF(DAY,U.DateOfBirth,UR.RegisterDate)/(365.25) END) MinUserAgeByRegisterDate,
		   MAX(CASE WHEN U.DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(UR.RegisterDate AS DATE)) AND UR.RegisterDate THEN DATEDIFF(DAY,U.DateOfBirth,UR.RegisterDate)/(365.25) END) MaxUserAgeByRegisterDate
	FROM [DWH_Papara].[DBO].[FACT_UserRetentions] UR  with (nolock)
	JOIN [DWH_Papara].[DBO].[DIM_UserAttributes] U			  with (nolock) ON UR.UserKey = U.User_Key
	group by FORMAT(RegisterDate,'yyyyMM'), CUBE(ur.UserType)
	)
--	INSERT INTO BI_Workspace..FACT_AcquisitionCubeAnalysis--BI_Workspace..FACT_UserAcquisitionAnalysis
		SELECT
		 GETDATE()					 LastStreamDate
		,IIF(DAY(GETDATE()) = 1,1,0) IsPermanentlyLogged --Ayın birinde hata alınmışsa ve üzerinden gün geçmişse ilgili zaman dilimi loglanamışsa LastStreamDate & IsPermanentlyLogged manuel girilmelidir. Örneğin; sırasıyla, 2023-05-01 00:00:00.000 & 1 >> Birkaç günlük fire MVP olarak önemsenmemelidir.
		,UnionedMetrics.[Year]
		,UnionedMetrics.[Quarter]
		,UnionedMetrics.[MonthKey]
		,MetricType,UnionedMetrics.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P],[IsPermanentLockout],HasPositiveTRYBalance,UserBalanceInterval
		--,IIF(ActiveUserRegisteredPreviousMonth  = 0
		-- AND ActiveUserRegisteredPrevious2Month = 0
		-- AND ActiveUserRegisteredPrevious3Month = 0
		-- AND ActiveUserRegistered2MonthsAgo	  = 0
		-- AND ActiveUserRegistered3MonthsAgo	  = 0
		-- AND ActiveUserRegisteredPreviousMTD	= 0 ,0,1) IsNearlyMonthConsidering
										 
		,RegisterCount
		,UserRegisterCumulativeCount																																				CumulativeRegisterCount
		,RegisterCount*1.0 / BasicUserCalculations_CTE.UserRegisterCumulativeCount																									RegisterRateOnTime
		,RegisterCount*1.0										   / MAX(UserRegisterCumulativeCount) OVER ()																		RegisterRateOfAllTime
		,BasicUserCalculations_CTE.UserRegisterCumulativeCount*1.0 / MAX(UserRegisterCumulativeCount) OVER ()																		CumulativeRegisterRateOfAllTime
		,LossCountMonth																																								UserCountHadLatestByMonth
		,[CumulativeLossCountOfAllTime]																																				CumulativeUserCountHadLatestByMonth
/**/		,[CumulativeLossRatePastProjection]																																			CumulativeUserRateHadLatestByMonthOverAllUserNow--CumulativeUserRateHadLatestTime-------------------------
/**/		,UnionedMetrics.[CumulativeLossCountOfAllTime]*1.0 / BasicUserCalculations_CTE.UserRegisterCumulativeCount																	CumulativeUserRateHadLatestByMonthOverAllUserOnTime--[CumulativeLossRateOnTimeProjection]
		,BasicUserCalculations_CTE.UserRegisterCumulativeCount -  UnionedMetrics.[CumulativeLossCountOfAllTime]																		CumulativeUserCountHadNotLatestByMonth--[CumulativeAcquisitionCount]
		,(BasicUserCalculations_CTE.UserRegisterCumulativeCount - UnionedMetrics.[CumulativeLossCountOfAllTime])*1.0 / UserRegisterCumulativeCount									CumulativeUserRateHadNotLatestByMonthOverAllUserOnTime--CumulativeAcquisitionRate
		,[CumulativeLossCountYEARLY]																																				CumulativeUserCountHadLatestByYear
		,[CumulativeLossCountQUARTER]																																				CumulativeUserCountHadLatestByQuarter
		,[MovingAverageOfLossAllTime]																																				MovingAverageOfUserCountHadLatestByAllTime
		,[MovingAverageLossYEARLY]																																					MovingAverageOfUserCountHadLatestByYear
		,[MovingAverageLossQUARTER]																																					MovingAverageOfUserCountHadLatestByQuarter																																		
		,AvgUserAgeByLastDate	 ,MinUserAgeByLastDate	  ,MaxUserAgeByLastDate
		,AvgUserAgeByRegisterDate,MinUserAgeByRegisterDate,MaxUserAgeByRegisterDate
		,AvgTenureBetweenRegisterDateAndLoginDate
		,AvgTenureBetweenRegisterDateLastUserBalanceModifiedAt
		,AvgTenureBetweenRegisterDateLastMaxBalanceModifiedAt
		,AvgTenureBetweenLastUserBalanceModifiedAtAndLastLoginDate
		,LedgeredTxCount
		,AvgMaxUserBalanceEver
		/*Aşağıdaki fonksiyonlar Kevser ile index hususu konuşulup cubic group by'a dönüştürülebilir-Anıl*/
		,LossCountRegisterAndLastDateWithin24Hr						UserCountHadLatestWithin24Hr
		,LossCountRegisterAndLastDateWithin7Days					UserCountHadLatestWithin7Days
		,LossCountRegisterAndLastDateWithin30Days					UserCountHadLatestWithin30Days
		,LossCountRegisterAndLastDateWithin90Days					UserCountHadLatestWithin90Days
		,LossCountRegisterAndLastDateWithin360Days					UserCountHadLatestWithin360Days

		,CumulativeLossCountRegisterAndLastDateWithin7Days			CumulativeUserCountHadLatestWithin7Days
		,CumulativeLossCountRegisterAndLastDateWithin30Days			CumulativeUserCountHadLatestWithin30Days
		,CumulativeLossCountRegisterAndLastDateWithin90Days			CumulativeUserCountHadLatestWithin90Days
		,CumulativeLossCountRegisterAndLastDateWithin360Days		CumulativeUserCountHadLatestWithin360Days

		,LossCountSameRegisterAndLastDateByWeek						UserCountHadLatestBySameWeek
		,LossCountSameRegisterAndLastDateByMonth					UserCountHadLatestBySameMonth
		,LossCountSameRegisterAndLastDateByQuarter					UserCountHadLatestBySameQuarter
		,LossCountSameRegisterAndLastDateByYear						UserCountHadLatestBySameYear
		,CumulativeLossCountRegisterAndLastDateWithin24Hr			CumulativeUserCountHadLatestWithin24Hr
		,CumulativeLossCountSameRegisterAndLastDateByWeek			CumulativeUserCountHadLatestBySameWeek
		,CumulativeLossCountSameRegisterAndLastDateByMonth			CumulativeUserCountHadLatestBySameMonth
		,CumulativeLossCountSameRegisterAndLastDateByQuarter		CumulativeUserCountHadLatestBySameQuarter
		,CumulativeLossCountSameRegisterAndLastDateByYear			CumulativeUserCountHadLatestBySameYear


		,LossCountBelowBalance50									UserCountHadLatestWithMaxBalanceBelow50
		,CumulativeLossCountBelowBalance50							CumulativeUserCountHadLatestWithMaxBalanceBelow50
		,LossCountAboveBalance1000									UserCountHadLatestWithMaxBalanceAbove1000
		,CumulativeLossCountAboveBalance1000						CumulativeUserCountHadLatestWithMaxBalanceAbove1000

		--,IIF(ActiveUserRegisteredPreviousMonth	= 0,NULL,ActiveUserRegisteredPreviousMonth ) ActiveUserRegisteredPreviousMonth  
		--,IIF(ActiveUserRegisteredPrevious2Month	= 0,NULL,ActiveUserRegisteredPrevious2Month) ActiveUserRegisteredPrevious2Month	
		--,IIF(ActiveUserRegisteredPrevious3Month	= 0,NULL,ActiveUserRegisteredPrevious3Month) ActiveUserRegisteredPrevious3Month	
		--,IIF(ActiveUserRegistered2MonthsAgo		= 0,NULL,ActiveUserRegistered2MonthsAgo	   ) ActiveUserRegistered2MonthsAgo		
		--,IIF(ActiveUserRegistered3MonthsAgo		= 0,NULL,ActiveUserRegistered3MonthsAgo	   ) ActiveUserRegistered3MonthsAgo		
		--,IIF(ActiveUserRegisteredPreviousMTD	= 0,NULL,ActiveUserRegisteredPreviousMTD   ) ActiveUserRegisteredPreviousMTD	


		--,IIF(ActiveUserRegisteredPreviousMonth  = 0,NULL,ActiveUserRegisteredPreviousMonth )*1.0 / CASE WHEN DAY(GETDATE()) = 1  THEN LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount) OVER (ORDER BY UnionedMetrics.MonthKey) END																															   AcquisitionRateRegisteredPreviousMonth
		--,IIF(ActiveUserRegisteredPrevious2Month	= 0,NULL,ActiveUserRegisteredPrevious2Month)*1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) end AcquisitionRateRegisteredPrevious2Month
		--,IIF(ActiveUserRegisteredPrevious3Month	= 0,NULL,ActiveUserRegisteredPrevious3Month)*1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,5) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) end AcquisitionRateRegisteredPrevious3Month
		--,IIF(ActiveUserRegistered2MonthsAgo		= 0,NULL,ActiveUserRegistered2MonthsAgo	   )*1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) END AcquisitionRateRegistered2MonthsAgo
		--,IIF(ActiveUserRegistered3MonthsAgo		= 0,NULL,ActiveUserRegistered3MonthsAgo	   )*1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) END AcquisitionRateRegistered3MonthsAgo
		----,IIF(ActiveUserRegisteredPreviousMTD	= 0,NULL,ActiveUserRegisteredPreviousMTD   )*1.0 / LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey) AcquisitionRateRegisteredPreviousMTD



		--,IIF(ActiveUserRegisteredPreviousMonth  = 0,NULL,1 - ActiveUserRegisteredPreviousMonth   *1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount) OVER (ORDER BY UnionedMetrics.MonthKey) END) LossRateRegisteredPreviousMonth
		--,IIF(ActiveUserRegisteredPrevious2Month = 0,NULL,1  -ActiveUserRegisteredPrevious2Month  *1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN															   LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN																LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) end) LossRateRegisteredPrevious2Month
		--,IIF(ActiveUserRegisteredPrevious3Month = 0,NULL,1  -ActiveUserRegisteredPrevious3Month  *1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,5) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey)+LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) end) LossRateRegisteredPrevious3Month
		--,IIF(ActiveUserRegistered2MonthsAgo	    = 0,NULL,1 - ActiveUserRegistered2MonthsAgo	     *1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) END) LossRateRegistered2MonthsAgo
		--,IIF(ActiveUserRegistered3MonthsAgo	    = 0,NULL,1 - ActiveUserRegistered3MonthsAgo	     *1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount,4) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,3) OVER (ORDER BY UnionedMetrics.MonthKey) END) LossRateRegistered3MonthsAgo
		----,IIF(ActiveUserRegisteredPreviousMTD    = 0,NULL,1 - ActiveUserRegisteredPreviousMTD	 *1.0 / CASE WHEN DAY(GETDATE()) = 1 THEN LAG(RegisterCount) OVER (ORDER BY UnionedMetrics.MonthKey) WHEN DAY(GETDATE()) != 1 THEN LAG(RegisterCount,2) OVER (ORDER BY UnionedMetrics.MonthKey) END) LossRateRegisteredPreviousMTD


		/*Aşağıdaki metrikler latest baktığımız için son zaman için çıkartılmalıdır*/
		--,ActiveUserRateRegisteredPreviousMonth										AcquisitionRateRegisteredPreviousMonth	
		--,ActiveUserRateRegisteredPrevious2Month										AcquisitionRateRegisteredPrevious2Month
		--,ActiveUserRateRegisteredPrevious3Month										AcquisitionRateRegisteredPrevious3Month
		--,ActiveUserRateRegistered2MonthsAgo											AcquisitionRateRegistered2MonthsAgo
		--,ActiveUserRateRegistered3MonthsAgo											AcquisitionRateRegistered3MonthsAgo
		--,ActiveUserRateRegisteredPreviousMTD											AcquisitionRateRegisteredPreviousMTD

		--,IIF( ActiveUserRateRegisteredPreviousMonth   != 1 ,1 - ActiveUserRateRegisteredPreviousMonth  ,NULL)	 LossRateRegisteredPreviousMonth	
		--,IIF( ActiveUserRateRegisteredPrevious2Month  != 1 ,1 - ActiveUserRateRegisteredPrevious2Month ,NULL)	 LossRateRegisteredPrevious2Month
		--,IIF( ActiveUserRateRegisteredPrevious3Month  != 1 ,1 - ActiveUserRateRegisteredPrevious3Month ,NULL)	 LossRateRegisteredPrevious3Month
		--,IIF( ActiveUserRateRegistered2MonthsAgo	  != 1 ,1 - ActiveUserRateRegistered2MonthsAgo	   ,NULL)	 LossRateRegistered2MonthsAgo
		--,IIF( ActiveUserRateRegistered3MonthsAgo	  != 1 ,1 - ActiveUserRateRegistered3MonthsAgo	   ,NULL)	 LossRateRegistered3MonthsAgo
		--,IIF( ActiveUserRateRegisteredPreviousMTD	  != 1 ,1 - ActiveUserRateRegisteredPreviousMTD	   ,NULL)	 LossRateRegisteredPreviousMTD
	  INTO  #FACT_UserAcquisitionCubeAnalysisY--BI_Workspace..FACT_UserLossAcquisitionAnalysis
	  FROM (SELECT*FROM LastLoginDate_CTE UNION SELECT*FROM LastLedgerTxDate_CTE) UnionedMetrics 
	  JOIN BasicUserCalculations_CTE ON UnionedMetrics.MonthKey = BasicUserCalculations_CTE.MonthKey and UnionedMetrics.UserType = BasicUserCalculations_CTE.UserType
	  order by UnionedMetrics.MonthKey
--cumregister count hatalı!!
	  --select * from BI_Workspace..FACT_UserAcquisitionCubeAnalysis1 
	  --WHERE  IsLastLoginUnsuccessful=10 AND	HasLedgeredTransaction=10 AND	HasClosedLoopP2P=10	AND IsPermanentLockout=10 AND	HasPositiveTRYBalance=10 AND	UserBalanceInterval=0
	  --order by MontHKEY

	 


	 --SELECT * FROM BI_Workspace..FACT_UserAcquisitionCubeAnalysisY WHERE MonthKey = 202305
	 --SELECT * INTO BI_Workspace..FACT_UserAcquisitionCubeAnalysis FROM  BI_Workspace..FACT_UserAcquisitionCubeAnalysisY
/*
	select * from #UserLossAnalysis
	where MetricType=1 and [UserType]=2 and [IsLastLoginUnsuccessful]=10 and [HasLedgeredTransaction]=1 and [HasClosedLoopP2P]=10 order by MonthKey
*/

/*	),LastLedgerTxDateNoSuccessfulLoginDate_CTE AS
	(
	SELECT distinct
		   COALESCE(YEAR(LastUserBalanceModifiedAt),YEAR(LastUserBalanceModifiedAt)) [Year],
		   COALESCE(DATEPART(quarter,LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt)) [Quarter]					 ,
		   COALESCE(CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ,CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT))	 MonthKey					 ,
		   '2' MetricType,  --BY LEDGER DATE (Never Logged in)
		   cast(COALESCE(CAST(UR.[UserType]				AS INT)	,10) AS INT)	[UserType]					,
		   cast(COALESCE(CAST([IsLastLoginUnsuccessful]	AS INT)	,10) AS INT)	[IsLastLoginUnsuccessful]	,
	--	   cast(COALESCE(CAST(UR.IsPassiveAccount	AS INT)	,10) AS INT)	IsPassiveAccount	,
		   cast(COALESCE([HasLedgeredTransaction]		,10) AS INT)			[HasLedgeredTransaction]	,
		   cast(COALESCE([HasClosedLoopP2P]				,10) AS INT)			[HasClosedLoopP2P]			,
		   SUM(COUNT(UR.UserKey))		  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])																										LossCountMonth,
		   SUM(SUM(TxCount))			  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])																										LedgeredTxCount,
		   SUM(SUM([MaxUserBalanceEver])) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])*1.0 / (SUM(COUNT(1))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasClosedLoopP2P]))	AvgMaxUserBalanceEver,
		   SUM(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P] ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)													  [CumulativeLossCountOfAllTime],
		   SUM(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P] ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)*1.0/SUM(COUNT(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P] )	[CumulativeLossRatePastProjection],
		   SUM(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P],YEAR(LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)								  [CumulativeLossCountYEARLY],
		   SUM(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P],YEAR(LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING) [CumulativeLossCountQUARTER],
		   AVG(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P] ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)													  [MovingAverageOfLossAllTime],
		   AVG(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P],YEAR(LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING)								  [MovingAverageLossYEARLY],
		   AVG(Count(UR.UserKey)) OVER (PARTITION BY UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P],YEAR(LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt) ORDER BY CAST(FORMAT(LastUserBalanceModifiedAt,'yyyyMM') AS INT) ROWS UNBOUNDED PRECEDING) [MovingAverageLossQUARTER], 
		   SUM(SUM([TenureBetweenRegisterDateAndLoginDate]))				  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenRegisterDateAndLoginDate] IS NOT NULL THEN 1 END))				OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]))	AvgTenureBetweenRegisterDateAndLoginDate,
		   SUM(SUM([TenureBetweenRegisterDateLastUserBalanceModifiedAt]))	  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])*1.0 / (SUM(COUNT(1))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]))	AvgTenureBetweenRegisterDateLastUserBalanceModifiedAt,
		   SUM(SUM([TenureBetweenRegisterDateLastMaxBalanceModifiedAt]))	  OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])*1.0 / (SUM(COUNT(1))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]))	AvgTenureBetweenRegisterDateLastMaxBalanceModifiedAt,
		   SUM(SUM([TenureBetweenLastUserBalanceModifiedAtAndLastLoginDate])) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])*1.0 / (SUM(COUNT(CASE WHEN [TenureBetweenLastUserBalanceModifiedAtAndLastLoginDate] IS NOT NULL THEN 1 END))	OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]))	AvgTenureBetweenLastUserBalanceModifiedAtAndLastLoginDate,
		   SUM(SUM(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN DATEDIFF(DAY,DateOfBirth,LastUserBalanceModifiedAt)/(365.25) END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])*1.0 / (SUM(COUNT(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN 1 END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P])) AvgUserAge,
		   MIN(MIN(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN DATEDIFF(DAY,DateOfBirth,LastUserBalanceModifiedAt)/(365.25) END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]) MinUserAge,
		   MAX(MAX(CASE WHEN DateOfBirth BETWEEN DATEADD(YEAR, -110, CAST(LastUserBalanceModifiedAt AS DATE)) AND LastUserBalanceModifiedAt THEN DATEDIFF(DAY,DateOfBirth,LastUserBalanceModifiedAt)/(365.25) END)) OVER (PARTITION BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]) MaxUserAge
	FROM [DWH_Papara].[DBO].[FACT_UserRetentions] UR with (nolock)
	JOIN [DWH_Papara].[DBO].[DIM_UserAttributes] U			 with (nolock) ON UR.UserKey = U.User_Key
	where LastLoginDate IS NULL
	GROUP BY FORMAT(LastUserBalanceModifiedAt,'yyyyMM'),YEAR(LastUserBalanceModifiedAt),DATEPART(quarter,LastUserBalanceModifiedAt)--,UR.[UserType],[IsLastLoginUnsuccessful],[HasLedgeredTransaction],[HasClosedLoopP2P]
			,CUBE(UR.[UserType],[HasLedgeredTransaction],[IsLastLoginUnsuccessful],[HasClosedLoopP2P])
*/	
